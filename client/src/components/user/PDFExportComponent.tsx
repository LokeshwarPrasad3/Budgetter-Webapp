import React from 'react';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { karlaFont } from '../../utils/font';

interface UserDetails {
  name: string;
  currentPocketMoney: string;
  DOB: string;
  email: string;
  profession: string;
}

interface Expense {
  sno: number;
  expense_name: string;
  price: string;
  category: string;
  time: string;
}

interface ExportTableProps {
  userDetails: UserDetails;
  expenses: Expense[];
}


const PDFExportComponent: React.FC<ExportTableProps> = ({
  userDetails,
  expenses,
}) => {
  const exportPDF = () => {
    const doc = new jsPDF('p', 'mm', 'a4');

    // ðŸ”¹ Register Karla Font
    doc.addFileToVFS('Karla-Regular.ttf', karlaFont);
    doc.addFont('Karla-Regular.ttf', 'Karla', 'normal');
    doc.setFont('Karla');

    // ðŸŸ¢ Header Section (Light Gray Background)
    doc.setFillColor(240, 240, 240);
    doc.rect(0, 0, 210, 25, 'F');

    // ðŸ”¹ Logo & Title
    doc.addImage('/assets/logo/logo.png', 'PNG', 67, 4, 15, 15);
    doc.setFontSize(22);
    doc.setTextColor(31, 41, 55);
    doc.text('BUDGETTER.', 84, 16);

    // ðŸ”¹ User Details Section
    doc.setFontSize(14);
    doc.text('USER DETAILS', 15, 36);

    autoTable(doc, {
      startY: 41,
      head: [['Field', 'Details']],
      body: [
        ['Name', userDetails.name],
        ['Email', userDetails.email],
        ['Current Balance', userDetails.currentPocketMoney],
        ['Date of Birth', userDetails.DOB],
        ['Profession', userDetails.profession],
      ],
      theme: 'grid',
      styles: { font: 'Karla', fontSize: 10, textColor: [31, 41, 55] },
      headStyles: { fillColor: [77, 107, 254], textColor: [255, 255, 255] },
      columnStyles: {
        0: { fontStyle: 'bold', halign: 'left' },
        1: { halign: 'left' },
      },
    });

    // ðŸ”¹ Expenses Table Heading
    doc.setFontSize(14);
    doc.text('EXPENSES STATEMENT', 15, doc.lastAutoTable.finalY + 10);

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 15,
      head: [['S.No.', 'Expense Name', 'Price', 'Category', 'Time']],
      body: expenses.map((expense) => [
        expense.sno,
        expense.expense_name,
        expense.price,
        expense.category,
        expense.time,
      ]),
      theme: 'striped',
      styles: { font: 'Karla', fontSize: 10, textColor: [31, 41, 55] },
      headStyles: { fillColor: [77, 107, 254], textColor: [255, 255, 255] },
      alternateRowStyles: { fillColor: [243, 244, 246] },
    });

    // ðŸ”¹ Footer
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text('Generated by Budgetter - Your Personal Finance Manager', 10, 285);
    doc.text(new Date().toLocaleDateString(), 170, 285);

    // ðŸ”¹ Save PDF
    doc.save(`${userDetails.name}-statement.pdf`);
  };

  return (
    <div className="p-4">
      <button
        onClick={exportPDF}
        className="bg-indigo-600 text-white px-6 py-2 rounded-lg shadow-md hover:bg-indigo-700 transition-colors duration-200 font-medium flex items-center gap-2 text-sm"
      >
        <svg
          className="w-4 h-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
          />
        </svg>
        Sample Export Statement
      </button>
    </div>
  );
};

export default PDFExportComponent;
